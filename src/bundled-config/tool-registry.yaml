# Tool Registry
# Universal tool knowledge for Hodge - ships with package, not user-editable
# Part of HODGE-341.2: Two-Layer Configuration Architecture

tools:
  # ==================== TypeScript/JavaScript Tools ====================

  typescript:
    languages: [typescript, javascript]
    detection:
      - type: config_file
        paths: [tsconfig.json]
      - type: package_json
        package: typescript
    installation:
      package_managers:
        npm:
          package: typescript
          install_command: npm install --save-dev typescript
    default_command: npx tsc -p tsconfig.build.json --noEmit
    version_command: tsc --version
    categories: [type_checking]
    # Note: TypeScript project mode doesn't accept ${files} - uses tsconfig include/exclude
    # Removed --pretty flag to avoid ANSI color codes in quality-checks.md (HODGE-344.3)
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    error_pattern: '^.+\(\d+,\d+\):\s+error\s+TS\d+:'
    warning_pattern: '^.+\(\d+,\d+\):\s+warning\s+TS\d+:'

  eslint:
    languages: [typescript, javascript]
    detection:
      - type: config_file
        paths:
          [
            .eslintrc.json,
            .eslintrc.js,
            .eslintrc.yaml,
            .eslintrc.cjs,
            .eslintrc.yml,
            eslint.config.js,
          ]
      - type: package_json
        package: eslint
    installation:
      package_managers:
        npm:
          package: eslint
          install_command: npm install --save-dev eslint
    default_command: npx eslint --format compact ${files}
    fix_command: npx eslint --fix ${files}
    version_command: eslint --version
    categories: [linting, complexity, code_smells]
    # --format compact: One issue per line (file:line:col: message)
    # More concise than default 'stylish' format
    # ESLint with sonarjs plugin provides linting, complexity, and code smell checks
    # --fix: Auto-fix issues (HODGE-341.6)
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    error_pattern: '^.+:\d+:\d+:\s+error\s+'
    warning_pattern: '^.+:\d+:\d+:\s+warning\s+'

  prettier:
    languages: [typescript, javascript, json, yaml, markdown, html, css]
    detection:
      - type: config_file
        paths:
          [
            .prettierrc,
            .prettierrc.json,
            .prettierrc.js,
            .prettierrc.yaml,
            .prettierrc.yml,
            prettier.config.js,
          ]
      - type: package_json
        package: prettier
    installation:
      package_managers:
        npm:
          package: prettier
          install_command: npm install --save-dev prettier
    default_command: npx prettier --check ${files}
    fix_command: npx prettier --write ${files}
    version_command: prettier --version
    categories: [formatting]
    # --check: Exit with error if files are not formatted (lists unformatted files)
    # --write: Auto-format files (HODGE-341.6)
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    # Prettier outputs [warn] filename.ts for unformatted files
    # Match lines with [warn] followed by a file path (has dot in it)
    error_pattern: '^\[warn\]\s+\S+\.\S+'
    warning_pattern: ''

  vitest:
    languages: [typescript, javascript]
    detection:
      - type: config_file
        paths: [vitest.config.ts, vitest.config.js, vitest.config.mts, vitest.config.mjs]
      - type: package_json
        package: vitest
    installation:
      package_managers:
        npm:
          package: vitest
          install_command: npm install --save-dev vitest
    default_command: NODE_ENV=test npx vitest run --reporter=dot --silent=passed-only
    version_command: vitest --version
    categories: [testing]
    # --reporter=dot: Dots for passing tests, 'x' for failures
    # --silent=passed-only: Only show console output from failing tests
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    error_pattern: '^\s*×\s+.+\s+>\s+.+'
    warning_pattern: ''

  # ==================== Advanced TypeScript/JavaScript Tools (HODGE-341.2) ====================

  eslint-plugin-sonarjs:
    languages: [typescript, javascript]
    detection:
      - type: eslint_plugin
        plugin_name: sonarjs
      - type: package_json
        package: eslint-plugin-sonarjs
    installation:
      package_managers:
        npm:
          package: eslint-plugin-sonarjs
          install_command: npm install --save-dev eslint-plugin-sonarjs
          post_install: |
            1. Add 'sonarjs' to plugins array in .eslintrc
            2. Add 'plugin:sonarjs/recommended-legacy' to extends array (ESLint 8.x)
            3. Recommended: Add rule override: "sonarjs/todo-tag": "warn" (TODOs acceptable in development)
    default_command: npx eslint ${files}
    categories: [complexity, code_smells]

  jscpd:
    languages: [typescript, javascript, python, go, java, ruby, php, kotlin]
    detection:
      - type: package_json
        package: jscpd
    installation:
      package_managers:
        npm:
          package: jscpd
          install_command: npm install --save-dev jscpd
    default_command: npx jscpd ${files} --min-lines 10 --ignore "node_modules/**,dist/**,.hodge/**,coverage/**,scripts/**,.claude/**"
    version_command: jscpd --version
    categories: [duplication]
    # Removed --silent: Need "Clone found" lines for regex extraction
    # Removed --reporters json: Human-readable output is easier to parse with regex
    # --ignore: Exclude non-source directories
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    # Duplications are warnings, not errors (don't block shipping)
    error_pattern: ''
    warning_pattern: '^Clone found \('

  dependency-cruiser:
    languages: [typescript, javascript]
    detection:
      - type: package_json
        package: dependency-cruiser
    installation:
      package_managers:
        npm:
          package: dependency-cruiser
          install_command: npm install --save-dev dependency-cruiser
    default_command: npx depcruise --config .dependency-cruiser.cjs --output-type err ${files} || true
    graph_command: npx depcruise --config .dependency-cruiser.cjs --output-type dot --collapse 2 . > .hodge/architecture-graph.dot || true
    version_command: depcruise --version
    categories: [architecture, architecture_graphing]
    # --output-type err: Only show violations, suppresses graph output
    # --collapse 2: Group modules at directory depth 2 (src/commands, src/lib)
    # graph_command: Generates DOT format architecture graph (HODGE-362)
    # || true: Exit 0 even with warnings (exit code 7), AI interprets stdout
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    error_pattern: '^\s*error\s+.+:\s+'
    warning_pattern: '^\s*warn\s+.+:\s+'

  semgrep:
    languages: [typescript, javascript, python, go, ruby, java, php, c, cpp, rust, kotlin]
    detection:
      - type: command
        command: semgrep
    installation:
      external: true
      install_instructions: 'Install from https://semgrep.dev/docs/getting-started/'
    default_command: semgrep --config .hodge/semgrep-rules/ --config auto --quiet ${files} 2>&1 | grep -v "ca-certs" || true
    version_command: semgrep --version
    categories: [security, patterns]
    # --quiet: Only show findings, suppress progress output
    # 2>&1 | grep -v "ca-certs" || true: Filter out certificate warnings, return success if no output
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    error_pattern: '^\s*❯❯❱\s+.+'
    warning_pattern: '^\s*▶▶▷\s+.+'

  # ==================== Python Tools ====================

  mypy:
    languages: [python]
    detection:
      - type: config_file
        paths: [mypy.ini, .mypy.ini, pyproject.toml, setup.cfg]
      - type: command
        command: mypy
    installation:
      package_managers:
        pip:
          package: mypy
          install_command: pip install mypy
        poetry:
          package: mypy
          install_command: poetry add --group dev mypy
    default_command: mypy --no-error-summary ${files}
    version_command: mypy --version
    categories: [type_checking]
    # --no-error-summary: Suppress summary stats, only show actual errors

  ruff:
    languages: [python]
    detection:
      - type: config_file
        paths: [ruff.toml, .ruff.toml, pyproject.toml]
      - type: command
        command: ruff
    installation:
      package_managers:
        pip:
          package: ruff
          install_command: pip install ruff
        poetry:
          package: ruff
          install_command: poetry add --group dev ruff
    default_command: ruff check --output-format concise ${files}
    fix_command: ruff check --fix ${files}
    version_command: ruff --version
    categories: [linting]
    # --output-format concise: One issue per line (file:line:col: code message)
    # --fix: Auto-fix issues (HODGE-341.6)

  pylint:
    languages: [python]
    detection:
      - type: config_file
        paths: [.pylintrc, pylintrc, pyproject.toml]
      - type: command
        command: pylint
    installation:
      package_managers:
        pip:
          package: pylint
          install_command: pip install pylint
        poetry:
          package: pylint
          install_command: poetry add --group dev pylint
    default_command: pylint --output-format=parseable --reports=no ${files}
    version_command: pylint --version
    categories: [linting, code_smells]
    # --output-format=parseable: One issue per line, no formatting
    # --reports=no: Suppress statistics section

  pytest:
    languages: [python]
    detection:
      - type: config_file
        paths: [pytest.ini, pyproject.toml, setup.cfg]
      - type: command
        command: pytest
    installation:
      package_managers:
        pip:
          package: pytest
          install_command: pip install pytest
        poetry:
          package: pytest
          install_command: poetry add --group dev pytest
    default_command: pytest --quiet --no-header --tb=short
    version_command: pytest --version
    categories: [testing]
    # --quiet: Minimal output, only show failures
    # --no-header: Suppress session header
    # --tb=short: Shorter traceback format

  black:
    languages: [python]
    detection:
      - type: config_file
        paths: [pyproject.toml, .black]
      - type: command
        command: black
    installation:
      package_managers:
        pip:
          package: black
          install_command: pip install black
        poetry:
          package: black
          install_command: poetry add --group dev black
    default_command: black --check --quiet ${files}
    fix_command: black ${files}
    version_command: black --version
    categories: [formatting]
    # --check: Exit with error if files need formatting
    # --quiet: Only show files that would be reformatted
    # Auto-fix: black formats files in-place by default (HODGE-341.6)

  radon:
    languages: [python]
    detection:
      - type: command
        command: radon
    installation:
      package_managers:
        pip:
          package: radon
          install_command: pip install radon
        poetry:
          package: radon
          install_command: poetry add --group dev radon
    default_command: radon cc --min C --no-assert ${files}
    version_command: radon --version
    categories: [complexity]
    # --min C: Only show functions with complexity C or worse (10+)
    # --no-assert: Don't count assert statements (test code)

  import-linter:
    languages: [python]
    detection:
      - type: config_file
        paths: [.importlinter, setup.cfg, pyproject.toml]
      - type: command
        command: lint-imports
    installation:
      package_managers:
        pip:
          package: import-linter
          install_command: pip install import-linter
        poetry:
          package: import-linter
          install_command: poetry add --group dev import-linter
    default_command: lint-imports --no-color
    version_command: lint-imports --version
    categories: [architecture]
    # --no-color: Plain text output (easier for AI to parse)

  pydeps:
    languages: [python]
    detection:
      - type: command
        command: pydeps
    installation:
      package_managers:
        pip:
          package: pydeps
          install_command: pip install pydeps
        poetry:
          package: pydeps
          install_command: poetry add --group dev pydeps
    graph_command: pydeps --max-bacon 2 --noshow --cluster --output .hodge/architecture-graph.dot . || true
    version_command: pydeps --version
    categories: [architecture, architecture_graphing]
    # --max-bacon 2: Limit depth to 2 levels (module-level grouping)
    # --noshow: Don't open graphical viewer, just generate file
    # --cluster: Group related modules together
    # --output: Specify DOT file output path (HODGE-362)
    # || true: Non-blocking failures

  # ==================== Kotlin Tools ====================

  kotlinc:
    languages: [kotlin]
    detection:
      - type: command
        command: kotlinc
    installation:
      external: true
      install_instructions: 'Install Kotlin from https://kotlinlang.org/docs/command-line.html or use SDKMAN'
    default_command: kotlinc -nowarn -d /tmp/hodge-kotlin-check ${files}
    version_command: kotlinc -version
    categories: [type_checking]
    # -nowarn: Suppress warnings, only show errors
    # -d /tmp: Output to temp dir (check only, don't pollute project)

  detekt:
    languages: [kotlin]
    detection:
      - type: config_file
        paths: [detekt.yml, .detekt.yml, detekt.yaml]
      - type: command
        command: detekt
    installation:
      package_managers:
        gradle:
          package: io.gitlab.arturbosch.detekt
          install_command: |
            Add to build.gradle.kts:
            plugins { id("io.gitlab.arturbosch.detekt") version "1.23.0" }
    default_command: detekt --input ${files} --report txt:stdout --build-upon-default-config
    version_command: detekt --version
    categories: [linting, complexity, code_smells]
    # --report txt:stdout: Print findings to stdout (not files)
    # --build-upon-default-config: Use sensible defaults

  ktlint:
    languages: [kotlin]
    detection:
      - type: config_file
        paths: [.editorconfig]
      - type: command
        command: ktlint
    installation:
      package_managers:
        gradle:
          package: com.pinterest.ktlint
          install_command: |
            Add to build.gradle.kts:
            plugins { id("org.jlleitschuh.gradle.ktlint") version "11.6.0" }
    default_command: ktlint --reporter=plain ${files}
    fix_command: ktlint -F ${files}
    version_command: ktlint --version
    categories: [formatting]
    # --reporter=plain: One issue per line, minimal formatting
    # -F: Auto-format files (HODGE-341.6)

  gradle-test:
    languages: [kotlin, java]
    detection:
      - type: config_file
        paths: [build.gradle.kts, build.gradle, gradlew]
    installation:
      external: true
      install_instructions: 'Gradle wrapper should be in project (./gradlew)'
    default_command: ./gradlew test --console=plain --quiet
    version_command: ./gradlew --version
    categories: [testing]
    # --console=plain: No ANSI color codes
    # --quiet: Only show failures and errors

  dependency-analysis-gradle-plugin:
    languages: [kotlin, java]
    detection:
      - type: gradle_plugin
        plugin: com.autonomousapps.dependency-analysis
    installation:
      package_managers:
        gradle:
          package: com.autonomousapps.dependency-analysis
          install_command: |
            Add to build.gradle.kts:
            plugins { id("com.autonomousapps.dependency-analysis") version "1.25.0" }
    default_command: ./gradlew buildHealth --console=plain --quiet
    version_command: ./gradlew buildHealth --version
    categories: [architecture]
    # --console=plain: No ANSI color codes
    # --quiet: Only show violations

  # ==================== Java Tools ====================

  javac:
    languages: [java]
    detection:
      - type: command
        command: javac
    installation:
      external: true
      install_instructions: 'Install JDK from https://adoptium.net/ or use SDKMAN'
    default_command: javac -Xlint:all -d /tmp/hodge-java-check ${files}
    version_command: javac -version
    categories: [type_checking]
    # -Xlint:all: Enable all warnings
    # -d /tmp: Output to temp dir (check only)

  checkstyle:
    languages: [java]
    detection:
      - type: config_file
        paths: [checkstyle.xml, .checkstyle.xml, config/checkstyle/checkstyle.xml]
      - type: command
        command: checkstyle
    installation:
      package_managers:
        gradle:
          package: checkstyle
          install_command: |
            Add to build.gradle.kts:
            plugins { checkstyle }
            checkstyle { toolVersion = "10.12.0" }
        maven:
          package: org.apache.maven.plugins:maven-checkstyle-plugin
          install_command: |
            Add to pom.xml:
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-checkstyle-plugin</artifactId>
            </plugin>
    default_command: checkstyle -c checkstyle.xml -f plain ${files}
    version_command: checkstyle --version
    categories: [linting]
    # -f plain: One violation per line (file:line:column: message)

  pmd:
    languages: [java]
    detection:
      - type: config_file
        paths: [pmd.xml, .pmd.xml, ruleset.xml]
      - type: command
        command: pmd
    installation:
      package_managers:
        gradle:
          package: pmd
          install_command: |
            Add to build.gradle.kts:
            plugins { pmd }
            pmd { toolVersion = "6.55.0" }
        maven:
          package: org.apache.maven.plugins:maven-pmd-plugin
          install_command: |
            Add to pom.xml:
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-pmd-plugin</artifactId>
            </plugin>
    default_command: pmd check --dir ${files} --rulesets rulesets/java/quickstart.xml --format text --no-cache
    version_command: pmd --version
    categories: [linting, complexity, code_smells]
    # --format text: Plain text output, one violation per line
    # --no-cache: Disable cache for consistent results

  google-java-format:
    languages: [java]
    detection:
      - type: command
        command: google-java-format
    installation:
      external: true
      install_instructions: 'Download from https://github.com/google/google-java-format/releases'
    default_command: google-java-format --dry-run --set-exit-if-changed ${files}
    fix_command: google-java-format --replace ${files}
    version_command: google-java-format --version
    categories: [formatting]
    # --dry-run: Don't modify files, just check
    # --set-exit-if-changed: Exit with error if formatting needed
    # --replace: Format files in-place (HODGE-341.6)

  maven-test:
    languages: [java]
    detection:
      - type: config_file
        paths: [pom.xml, mvnw]
    installation:
      external: true
      install_instructions: 'Maven wrapper should be in project (./mvnw)'
    default_command: ./mvnw test --batch-mode --quiet
    version_command: ./mvnw --version
    categories: [testing]
    # --batch-mode: Non-interactive, no progress messages
    # --quiet: Only show errors

  jdepend:
    languages: [java, kotlin]
    detection:
      - type: command
        command: jdepend
    installation:
      package_managers:
        gradle:
          package: jdepend:jdepend
          install_command: |
            Add to build.gradle.kts dependencies:
            testImplementation("jdepend:jdepend:2.10")
        maven:
          package: jdepend:jdepend
          install_command: |
            Add to pom.xml:
            <dependency>
              <groupId>jdepend</groupId>
              <artifactId>jdepend</artifactId>
              <version>2.10</version>
            </dependency>
    default_command: jdepend -file - ${files}
    graph_command: jdepend -components ${files} | python3 -c "import sys; print('digraph {'); [print(f'  \"{line.split()[0]}\" -> \"{line.split()[2]}\"') for line in sys.stdin if '->' in line]; print('}')" > .hodge/architecture-graph.dot || true
    version_command: jdepend -version
    categories: [architecture, architecture_graphing]
    # -file -: Output to stdout instead of file
    # graph_command: Parse jdepend output to DOT format (HODGE-362)
    # Note: jdepend doesn't natively output DOT, so we convert via Python one-liner
    # || true: Non-blocking failures

  # ==================== Go Tools ====================

  go-build:
    languages: [go]
    detection:
      - type: config_file
        paths: [go.mod]
      - type: command
        command: go
    installation:
      external: true
      install_instructions: 'Install Go from https://go.dev/doc/install'
    default_command: go build -o /dev/null ./...
    version_command: go version
    categories: [type_checking]
    # -o /dev/null: Compile but don't save binary (check only)
    # ./...: Build all packages in current directory and subdirectories

  golangci-lint:
    languages: [go]
    detection:
      - type: config_file
        paths: [.golangci.yml, .golangci.yaml, .golangci.toml]
      - type: command
        command: golangci-lint
    installation:
      external: true
      install_instructions: 'Install from https://golangci-lint.run/usage/install/'
    default_command: golangci-lint run --out-format=line-number ${files}
    fix_command: golangci-lint run --fix ${files}
    version_command: golangci-lint --version
    categories: [linting, complexity, code_smells]
    # --out-format=line-number: One issue per line (file:line:column: message)
    # --fix: Auto-fix issues (HODGE-341.6)

  gofmt:
    languages: [go]
    detection:
      - type: command
        command: gofmt
    installation:
      external: true
      install_instructions: 'Included with Go installation'
    default_command: gofmt -l ${files}
    fix_command: gofmt -w ${files}
    version_command: go version
    categories: [formatting]
    # -l: List files that need formatting
    # -w: Write formatted output back to files (HODGE-341.6)

  go-test:
    languages: [go]
    detection:
      - type: config_file
        paths: [go.mod]
    installation:
      external: true
      install_instructions: 'Included with Go installation'
    default_command: go test -short ./...
    version_command: go version
    categories: [testing]
    # -short: Run only short tests (skip long-running tests)
    # ./...: Test all packages

  godepgraph:
    languages: [go]
    detection:
      - type: command
        command: godepgraph
    installation:
      external: true
      install_instructions: 'Install with: go install github.com/kisielk/godepgraph@latest'
    graph_command: godepgraph -s -p github.com,golang.org,gopkg.in . > .hodge/architecture-graph.dot || true
    version_command: godepgraph -version
    categories: [architecture, architecture_graphing]
    # -s: Only show packages in current module (not stdlib/external)
    # -p: Additional packages to exclude (common third-party domains)
    # Outputs DOT format natively (HODGE-362)
    # || true: Non-blocking failures

/**
 * Markdown Formatting for HODGE.md
 * Formats context into markdown sections
 */

import type { HodgeMDContext, HodgeMDSection } from './types.js';

/**
 * Formats HODGE.md context into markdown
 */
export class HodgeMDFormatter {
  /**
   * Format context as markdown
   */
  formatAsMarkdown(context: HodgeMDContext): string {
    const sections: HodgeMDSection[] = [
      this.createStatusSection(context),
      this.createSessionSection(context),
      this.createPrinciplesSection(context),
      this.createDecisionsSection(context),
      this.createStandardsSection(context),
      this.createFilesSection(context),
      this.createCommandsSection(context),
      this.createNextStepsSection(context),
    ];

    // Sort by priority and filter out empty sections
    const sortedSections = sections
      .filter((s) => s.content.trim())
      .sort((a, b) => a.priority - b.priority);

    // Build the final markdown
    const markdown = [
      '# HODGE.md',
      '',
      'This file provides AI assistants with context about the current Hodge workflow state.',
      '',
      ...sortedSections.map((s) => s.content),
      '',
      '---',
      '_Generated by Hodge for cross-tool AI compatibility_',
    ].join('\n');

    return markdown;
  }

  private createStatusSection(context: HodgeMDContext): HodgeMDSection {
    const content = [
      '## Current Status',
      '',
      `**Feature**: ${context.feature}`,
      `**Mode**: ${context.mode}`,
      context.pmIssue ? `**PM Issue**: ${context.pmIssue}` : '',
      `**Last Updated**: ${new Date().toISOString()}`,
      '',
    ]
      .filter((line) => line !== '')
      .join('\n');

    return { title: 'Status', content, priority: 1 };
  }

  private createSessionSection(context: HodgeMDContext): HodgeMDSection {
    if (!context.session) {
      return { title: 'Session', content: '', priority: 2 };
    }

    const session = context.session;
    const age = Date.now() - session.ts;
    const ageMinutes = Math.floor(age / 60000);
    const ageHours = Math.floor(ageMinutes / 60);

    let ageStr = `${ageMinutes} minutes ago`;
    if (ageHours > 0) {
      ageStr = `${ageHours} hours ago`;
    }

    const content = [
      '## Current Session',
      '',
      `**Resumed**: ${ageStr}`,
      session.summary ? `**Progress**: ${session.summary}` : '',
      `**Working on**: ${session.feature} (${session.mode} mode)`,
      '',
      '## AI Context Restoration',
      `You were helping with ${session.feature}. ${session.summary ?? 'Continue from where we left off.'}`,
      session.nextAction ? `Suggested next: ${session.nextAction}` : '',
      '',
    ]
      .filter((line) => line !== '')
      .join('\n');

    return { title: 'Session', content, priority: 2 };
  }

  private createDecisionsSection(context: HodgeMDContext): HodgeMDSection {
    if (context.decisions.length === 0) {
      return { title: 'Decisions', content: '', priority: 3 };
    }

    const content = [
      '## Recent Decisions',
      '',
      ...context.decisions.map((d) => `- **${d.date}**: ${d.decision}`),
      '',
    ].join('\n');

    return { title: 'Decisions', content, priority: 2 };
  }

  private createStandardsSection(context: HodgeMDContext): HodgeMDSection {
    if (context.standards.length === 0) {
      return { title: 'Standards', content: '', priority: 3 };
    }

    const content = [
      '## Active Standards',
      '',
      ...context.standards.flatMap((s) => [
        `### ${s.category}`,
        ...s.rules.map((r) => `- ${r}`),
        '',
      ]),
    ].join('\n');

    return { title: 'Standards', content, priority: 3 };
  }

  private createFilesSection(context: HodgeMDContext): HodgeMDSection {
    if (context.workingFiles.length === 0) {
      return { title: 'Files', content: '', priority: 4 };
    }

    const content = [
      '## Working Files',
      '',
      ...context.workingFiles.map((f) => `- \`.hodge/features/${context.feature}/${f}\``),
      '',
    ].join('\n');

    return { title: 'Files', content, priority: 4 };
  }

  private createCommandsSection(context: HodgeMDContext): HodgeMDSection {
    if (context.recentCommands.length === 0) {
      return { title: 'Commands', content: '', priority: 5 };
    }

    const content = [
      '## Recent Commands',
      '',
      '```bash',
      ...context.recentCommands,
      '```',
      '',
    ].join('\n');

    return { title: 'Commands', content, priority: 5 };
  }

  private createNextStepsSection(context: HodgeMDContext): HodgeMDSection {
    const content = [
      '## Next Steps',
      '',
      ...context.nextSteps.map((s, i) => `${i + 1}. ${s}`),
      '',
    ].join('\n');

    return { title: 'Next Steps', content, priority: 6 };
  }

  private createPrinciplesSection(context: HodgeMDContext): HodgeMDSection {
    if (!context.principles || context.principles.length === 0) {
      return { title: 'Principles', content: '', priority: 2 };
    }

    const content = [
      '## Core Principles',
      '',
      ...context.principles.map((p) => `- **${p.title}**: ${p.description}`),
      '',
    ].join('\n');

    return { title: 'Principles', content, priority: 2 };
  }
}

version: '1.0'
language: typescript

# Optional: Critical File Selection Settings (HODGE-341.3)
# Uncomment to customize how critical files are selected for AI review
# max_critical_files: 10  # Default: 10, increase for larger reviews
# critical_paths:         # Project-specific critical paths (glob patterns)
#   - src/payments/       # Business-critical: payment processing
#   - src/auth/           # Security-critical: authentication
#   - src/lib/*-service.ts # Core service files

# Quality Gates (HODGE-341.5)
# Configure how warnings are handled after errors are fixed
quality_gates:
  harden:
    # Should AI review warnings after all errors are fixed?
    review_warnings: true

    # Optional: Guidance for AI when reviewing warnings (not rigid rules)
    # AI will use judgment based on project context, standards, and this guidance
    warning_guidance: |
      Focus on production-impacting issues:
      - Security warnings (any tool, any severity)
      - Cognitive complexity >15 (maintainability risk)
      - Functions >50 lines (testability concern)
      - Files >300 lines (architectural smell)
      - Code duplication (DRY principle)

      Lower priority (fix if time allows):
      - Style/formatting preferences
      - Minor TypeScript inference warnings
      - Overly strict linting rules

quality_checks:
  type_checking:
    - typescript
  linting:
    - eslint # ESLint with sonarjs plugin checks linting, complexity, and code smells
  testing:
    - vitest
  formatting:
    - prettier
  complexity: []
  code_smells: []
  duplication:
    - jscpd
  architecture:
    - dependency-cruiser
  security:
    - semgrep

commands:
  typescript:
    command: npx tsc -p tsconfig.build.json --noEmit
    provides:
      - type_checking
    # Note: TypeScript project mode doesn't accept ${files} - uses tsconfig include/exclude
    # Removed --pretty flag to avoid ANSI color codes in quality-checks.md (HODGE-344.3)
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    error_pattern: '^.+\(\d+,\d+\):\s+error\s+TS\d+:'
    warning_pattern: '^.+\(\d+,\d+\):\s+warning\s+TS\d+:'
  eslint:
    command: npx eslint --format compact ${files}
    fix_command: npx eslint --fix ${files}
    provides:
      - linting
      - complexity
      - code_smells
    # --format compact: One issue per line (file:line:col: message)
    # More concise than default 'stylish' format
    # ESLint with sonarjs plugin provides linting, complexity, and code smell checks
    # --fix: Auto-fix issues (HODGE-341.6)
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    error_pattern: '^.+:\d+:\d+:\s+error\s+'
    warning_pattern: '^.+:\d+:\d+:\s+warning\s+'
  vitest:
    command: NODE_ENV=test npx vitest run --reporter=dot --silent=passed-only
    provides:
      - testing
    # --reporter=dot: Dots for passing tests, 'x' for failures
    # --silent=passed-only: Only show console output from failing tests
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    error_pattern: '^\s*×\s+.+\s+>\s+.+'
    warning_pattern: ''
  prettier:
    command: npx prettier --check ${files}
    fix_command: npx prettier --write ${files}
    provides:
      - formatting
    # --check: Exit with error if files are not formatted (lists unformatted files)
    # --write: Auto-format files (HODGE-341.6)
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    # Prettier outputs [warn] filename.ts for unformatted files
    # Match lines with [warn] followed by a file path (has dot in it)
    error_pattern: '^\[warn\]\s+\S+\.\S+'
    warning_pattern: ''
  jscpd:
    command: npx jscpd ${files} --min-lines 10 --silent --reporters json --ignore "node_modules/**,dist/**,.hodge/**"
    provides:
      - duplication
    # --silent: No progress output
    # --reporters json: Structured output
    # --ignore: Exclude node_modules, dist, and .hodge directories
    # HODGE-359.1: Regex patterns for structured error/warning extraction (JSON output)
    error_pattern: '"duplicates":\s*\[\s*\{'
    warning_pattern: ''
  dependency-cruiser:
    command: npx depcruise --config .dependency-cruiser.cjs --output-type err ${files} || true
    provides:
      - architecture
    # --output-type err: Only show violations
    # || true: Exit 0 even with warnings (exit code 7), AI interprets stdout
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    error_pattern: '^\s*error\s+.+:\s+'
    warning_pattern: '^\s*warn\s+.+:\s+'
  semgrep:
    command: semgrep --config .hodge/semgrep-rules/ --config auto --quiet ${files} 2>&1 | grep -v "ca-certs" || true
    provides:
      - security
      - patterns
    # --quiet: Only show findings, suppress progress
    # 2>&1 | grep -v "ca-certs" || true: Filter out certificate warnings, return success if no output
    # HODGE-359.1: Regex patterns for structured error/warning extraction
    error_pattern: '^\s*❯❯❱\s+.+'
    warning_pattern: '^\s*▶▶▷\s+.+'

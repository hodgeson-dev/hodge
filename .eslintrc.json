{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "plugins": ["@typescript-eslint", "sonarjs", "local-rules"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:sonarjs/recommended-legacy"
  ],
  "rules": {
    // Essential Standards (Always Enforced)
    // Allow console for CLI tools, but still catch accidental console usage in lib
    "no-console": "off",

    // SonarJS rule overrides
    "sonarjs/todo-tag": "warn", // Downgrade from error to warning (TODOs are acceptable in development)
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-unsafe-return": "error",
    "@typescript-eslint/no-unsafe-assignment": "error",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-misused-promises": "error",
    
    // Recommended Standards (Warnings for now)
    "@typescript-eslint/naming-convention": [
      "warn",
      {
        "selector": "class",
        "format": ["PascalCase"]
      },
      {
        "selector": "interface",
        "format": ["PascalCase"]
      },
      {
        "selector": "typeAlias",
        "format": ["PascalCase"]
      },
      {
        "selector": "enum",
        "format": ["PascalCase"]
      },
      {
        "selector": "variable",
        "modifiers": ["const", "global"],
        "format": ["UPPER_CASE"],
        "filter": {
          "regex": "^[A-Z_]+$",
          "match": true
        }
      },
      {
        "selector": "variable",
        "modifiers": ["const"],
        "format": ["camelCase", "PascalCase"]
      },
      {
        "selector": "function",
        "format": ["camelCase"]
      }
    ],
    
    // Code Quality
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-unnecessary-condition": "warn",
    "@typescript-eslint/prefer-nullish-coalescing": "warn",
    "@typescript-eslint/prefer-optional-chain": "warn",

    // File and Function Length Standards
    "max-lines": [
      "warn",
      {
        "max": 400,
        "skipBlankLines": true,
        "skipComments": true
      }
    ],
    "max-lines-per-function": [
      "warn",
      {
        "max": 50,
        "skipBlankLines": true,
        "skipComments": true
      }
    ],

    // Test Infrastructure Standards (HODGE-341.5)
    "local-rules/no-date-now-in-tests": "error"
  },
  "ignorePatterns": [
    "dist/",
    "node_modules/",
    "*.js",
    "scripts/"
  ],
  "overrides": [
    {
      "files": ["**/*.test.ts", "**/test/**/*.ts", "**/explore/**/*.ts", "**/.hodge/features/*/explore/**/*.ts"],
      "rules": {
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-unsafe-assignment": "warn",
        "@typescript-eslint/no-unsafe-argument": "warn",
        "@typescript-eslint/no-unsafe-member-access": "warn",
        "@typescript-eslint/no-unsafe-return": "warn",
        "@typescript-eslint/require-await": "warn",
        // Relax file/function length limits for test files
        "max-lines": "off",
        "max-lines-per-function": "off"
      }
    }
  ]
}